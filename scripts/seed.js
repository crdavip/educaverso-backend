"use strict";

const { categories, professions } = require("./data.json");

async function run() {
  const { createStrapi, compileStrapi } = require("@strapi/strapi");

  const appContext = await compileStrapi();
  const app = await createStrapi(appContext).load();
  app.log.level = "error";

  const CATEGORY_UID = "api::category.category";
  const PROFESSION_UID = "api::profession.profession";

  try {
    // üîπ 1) Limpiar categor√≠as y profesiones
    const existingCategories = await strapi.documents(CATEGORY_UID).findMany({ limit: 10000 });
    for (const doc of existingCategories) {
      await strapi.documents(CATEGORY_UID).delete({ documentId: doc.documentId });
    }

    const existingProfessions = await strapi.documents(PROFESSION_UID).findMany({ limit: 10000 });
    for (const doc of existingProfessions) {
      await strapi.documents(PROFESSION_UID).delete({ documentId: doc.documentId });
    }

    // üîπ 2) Crear y publicar categor√≠as
    const categoryMap = {}; // slug ‚Üí documentId
    for (const category of categories) {
      const draft = await strapi.documents(CATEGORY_UID).create({ data: category });
      const published = await strapi.documents(CATEGORY_UID).publish({ documentId: draft.documentId });
      categoryMap[category.slug] = published.documentId; // guardamos relaci√≥n
    }

    // üîπ 3) Crear y publicar profesiones asociadas
    for (const group of professions) {
      const categoryId = categoryMap[group.category];
      if (!categoryId) {
        console.warn(`‚ö†Ô∏è No se encontr√≥ categor√≠a con slug ${group.category}`);
        continue;
      }

      for (const professionName of group.professions) {
        const draft = await strapi.documents(PROFESSION_UID).create({
          data: {
            name: professionName,
            category: categoryId, // üëà relaci√≥n por documentId
          },
        });

        await strapi.documents(PROFESSION_UID).publish({ documentId: draft.documentId });
      }
    }

    console.log("‚úÖ Seed de categor√≠as + profesiones completado.");
  } catch (err) {
    console.error("‚ùå Error en seed:", err);
  } finally {
    await app.destroy();
    process.exit(0);
  }
}

run();
